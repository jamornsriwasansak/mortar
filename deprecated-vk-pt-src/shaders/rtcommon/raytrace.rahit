#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "common/math.glsl"
#include "shared.glsl.h"
#include "common/ray.glsl"
#include "rtcommon/raypayload.glsl"
#include "rtcommon/trimeshlayout.glsl"

layout(location = RAY_PRD_LOCATION) rayPayloadInNV CommonRayPayload prd;
hitAttributeNV vec3 attribs;

DECLARE_TRIMESH_LAYOUT(1)

void main()
{
    // since alpha channel is stored inside diffuse 
    const uint material_id = material_ids_arrays[gl_InstanceID].material_ids[gl_PrimitiveID];
    Material material = mat.materials[material_id];

    // if object is not opaque, the object is definite textured.
    // since it is possible to have different materials for different faces in the same instance,
    // we have to check whehter it is opaque or not, otherwise, it will lead to fetching texture at illegal address.
    if ((material.m_flags & MATERIAL_FLAG_IS_OPAQUE) != 0) { return; }
    
    // fetch from ssbo
    const uint index0 = faces_arrays[gl_InstanceID].faces[gl_PrimitiveID * 3 + 0];
    const uint index1 = faces_arrays[gl_InstanceID].faces[gl_PrimitiveID * 3 + 1];
    const uint index2 = faces_arrays[gl_InstanceID].faces[gl_PrimitiveID * 3 + 2];
    const float v0 = nvs_arrays[gl_InstanceID].normal_and_vs[index0].w;
    const float v1 = nvs_arrays[gl_InstanceID].normal_and_vs[index1].w;
    const float v2 = nvs_arrays[gl_InstanceID].normal_and_vs[index2].w;
    const float u0 = pus_arrays[gl_InstanceID].position_and_us[index0].w;
    const float u1 = pus_arrays[gl_InstanceID].position_and_us[index1].w;
    const float u2 = pus_arrays[gl_InstanceID].position_and_us[index2].w;

    // since the material is not opaque, we can always assume that it has texture
    vec2 texcoord = mix_barycoord(attribs.xy, vec2(u0, v0), vec2(u1, v1), vec2(u2, v2));

    // organize the values
	float alpha = texture(material_textures[-int(material.m_diffuse_refl.r + 1)], texcoord).a;
    if (alpha <= 0.5)
    {
        ignoreIntersectionNV();
    }
}
