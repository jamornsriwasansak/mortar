#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "common/ray.glsl"
#include "renderer/primpath/hitpayload.glsl"
#include "shared.glsl.h"

layout(location = RAY_PRD_LOCATION) rayPayloadInNV PrimitivePathTracerPayload prd;
hitAttributeNV vec3 attribs;

layout(set = 1, binding = 0) buffer Face
{
    uint faces[];
} faces_arrays[];

layout(set = 2, binding = 0) buffer PuArray
{
    vec4 position_and_us[];
} pus_arrays[];

layout(set = 3, binding = 0) buffer NvArray
{
    vec4 normal_and_vs[];
} nvs_arrays[];

layout(set = 4, binding = 0) buffer MaterialId
{
    uint material_ids[];
} material_ids_arrays[];

layout(set = 5, binding = 0) buffer MaterialBuffer
{
    Material materials[];
} mat;

layout(set = 6, binding = 0) uniform sampler2D textures[];

vec2 mix_barycoord(const vec2 bary, const vec2 a, const vec2 b, const vec2 c)
{
    return (1.0f - bary.x - bary.y) * a + bary.x * b + bary.y * c;
}

void main()
{
    // since alpha channel is stored inside diffuse 
    const uint material_id = material_ids_arrays[gl_InstanceID].material_ids[gl_PrimitiveID];
    Material material = mat.materials[material_id];

    // if object is not opaque, the object is definite textured.
    if ((material.m_flags & MATERIAL_FLAG_IS_OPAQUE) != 0) { return; }
    
    // fetch from ssbo
    const uint index0 = faces_arrays[gl_InstanceID].faces[gl_PrimitiveID * 3 + 0];
    const uint index1 = faces_arrays[gl_InstanceID].faces[gl_PrimitiveID * 3 + 1];
    const uint index2 = faces_arrays[gl_InstanceID].faces[gl_PrimitiveID * 3 + 2];
    const float v0 = nvs_arrays[gl_InstanceID].normal_and_vs[index0].w;
    const float v1 = nvs_arrays[gl_InstanceID].normal_and_vs[index1].w;
    const float v2 = nvs_arrays[gl_InstanceID].normal_and_vs[index2].w;
    const float u0 = pus_arrays[gl_InstanceID].position_and_us[index0].w;
    const float u1 = pus_arrays[gl_InstanceID].position_and_us[index1].w;
    const float u2 = pus_arrays[gl_InstanceID].position_and_us[index2].w;

    // since the material is not opaque, we can always assume that it has texture
    vec2 texcoord = mix_barycoord(attribs.xy, vec2(u0, v0), vec2(u1, v1), vec2(u2, v2));

    // organize the values
	float alpha = texture(textures[-int(material.m_diffuse_refl.r + 1)], texcoord).a;
    if (alpha <= 0.5)
    {
        ignoreIntersectionNV();
    }
}
